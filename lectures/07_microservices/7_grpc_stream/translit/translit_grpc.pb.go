// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: translit.proto

package translit

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Transliteration_EnRu_FullMethodName = "/translit.Transliteration/EnRu"
)

// TransliterationClient is the client API for Transliteration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// grpc-сервис транслитерации
type TransliterationClient interface {
	EnRu(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Word, Word], error)
}

type transliterationClient struct {
	cc grpc.ClientConnInterface
}

func NewTransliterationClient(cc grpc.ClientConnInterface) TransliterationClient {
	return &transliterationClient{cc}
}

func (c *transliterationClient) EnRu(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Word, Word], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Transliteration_ServiceDesc.Streams[0], Transliteration_EnRu_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Word, Word]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transliteration_EnRuClient = grpc.BidiStreamingClient[Word, Word]

// TransliterationServer is the server API for Transliteration service.
// All implementations must embed UnimplementedTransliterationServer
// for forward compatibility.
//
// grpc-сервис транслитерации
type TransliterationServer interface {
	EnRu(grpc.BidiStreamingServer[Word, Word]) error
	mustEmbedUnimplementedTransliterationServer()
}

// UnimplementedTransliterationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransliterationServer struct{}

func (UnimplementedTransliterationServer) EnRu(grpc.BidiStreamingServer[Word, Word]) error {
	return status.Errorf(codes.Unimplemented, "method EnRu not implemented")
}
func (UnimplementedTransliterationServer) mustEmbedUnimplementedTransliterationServer() {}
func (UnimplementedTransliterationServer) testEmbeddedByValue()                         {}

// UnsafeTransliterationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransliterationServer will
// result in compilation errors.
type UnsafeTransliterationServer interface {
	mustEmbedUnimplementedTransliterationServer()
}

func RegisterTransliterationServer(s grpc.ServiceRegistrar, srv TransliterationServer) {
	// If the following call pancis, it indicates UnimplementedTransliterationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Transliteration_ServiceDesc, srv)
}

func _Transliteration_EnRu_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransliterationServer).EnRu(&grpc.GenericServerStream[Word, Word]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Transliteration_EnRuServer = grpc.BidiStreamingServer[Word, Word]

// Transliteration_ServiceDesc is the grpc.ServiceDesc for Transliteration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transliteration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "translit.Transliteration",
	HandlerType: (*TransliterationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnRu",
			Handler:       _Transliteration_EnRu_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "translit.proto",
}
